/* caniuse.com にてgridを検索し、太枠の内容を確認 */

/* 「グリッドシステム」
親要素に[display:grid]を定義し子要素の細かい指定をする方法 */
/* それぞれのグリッド内で要素の細かい指定もできる */

/* 子要素に位置を指定する事によって任意の場所に移動させることが出来る
横の線：grid-row
上の線から1,2,3,4と数える(-の値からは下から数える「−１」は一番下の線)
縦の線：grid-column
左の線から1,2,3,4と数える(-の値からは右から数える「−１」は一番右の線) */

/* 数え方として
ex)
grid-row: 2 / 4 ;(2-4を指定)
grid-column: 2 / span 2 ;(2の位置から2本分を指定)
交わった点を左上の点として四角形の位置を指定する

グリッドラインに名前をつける
親要素grid-template-columnsプロパティに大括弧で名前を指定し
子要素に対して指定した名前を入れ込む
ex)
container{
  grid-template-columns:100px [target-start] 100px 100px [target-end] ;
}

box{
  grid-column: target-start / target-end;
} */



 /* 「display:grid」親要素に適用、子要素を詳細に設置できる 
 数値を入力する際に「1fr」と入力してあげると余白を使ったサイズになる 
 数値を入力する際に「2fr 1fr」と入力してあげると余白を使った2:1のサイズ比率になる 
 columns:幅　rows:高さ 
ex)  grid-template-columns: 100px 2fr 1fr; 左:1行目の幅 中:2行目の幅 右:3行目の幅
     grid-template-rows: 100px 100px; 左：1列目の高さ　右：2列目の高さ 
     ⇨◉◉◉
     　◉◉◉　このようなグリッドができる*/


/* 「repeat()」
省略形で指定できる
repeat(4つの, 幅)
ex)
 grid-template-columns: 100px 100px 100px 100px;
 = grid-template-columns: repeat(4, 100px);省略形 */


 /* 「auto-fill」親要素に適用 
ブラウザ幅によって自動的に子要素が移動する
ex) grid-template-columns: repeat(auto-fill, 100px); */


/* 「gap」
親要素に設置、子要素間の余白を設定できる
ex).container{
  display:grid
  grid-template-columns: repeat(auto-fill, 100px);
  grid-template-rows: 100px 100px;
  gap: 10px;(子要素間の余白を10pxに指定)
  (gap: 20px 40px;左：縦方向の余白　右：横方向の余白)
} */


/*「minmax」
   列の幅を100pxから1frの範囲にするよう指定 
   ex)
   grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
  ⇨広げると幅が均等に伸びる、全ての子要素が入ったらぴったり100pxになる。しかし、更にブラウザを拡大して配置する要素がなくなった時また右側が開いてしまう */


  /* 「auto-fit」
  余白を作らず常にピッタリと設置するよう指定 
  ex)
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); 
  ⇨広げると幅が均等に伸びる、全ての子要素が入ったらぴったり100pxになる。
  更にブラウザを拡大すると余白がない状態で子要素が均等に伸びていく*/


  /* 「grid-auto-rows」
  「grid」で定義されていない行ができた場合自動で高さが指定される
  ex)
  親要素に指定定義されていない行の高さを100pxに指定する
  grid-auto-rows: 100px; */


  /* 「grid-auto-flow」
  親要素に指定
  左上から列ごとに並べたい場合は、column
  左上から行ごとに並べたい場合は、row
  ex)
  container{
    display:grid;
    grid-template-columns: repeat(3, 100px);
    grid-template-rows:repeat(4, 100px);

    grid-auto-flow:column;
  } */


  /* 「grid-auto-columns」
  親要素に指定
  grid外の列の幅を指定したい場合(「div」は幅指定しないと横一杯に広がる為)に使用
  ex)
  container{
    display:grid;
    grid-template-columns: repeat(3, 100px);
    grid-template-rows:repeat(4, 100px);

    grid-auto-flow:column;
    grid-auto-columns:100px;
  } */


  /* 「dense」
  親要素内のプロパティに追加
  空きスペース分に収納される
  ex)
  container{
    display:grid;
    grid-template-columns: repeat(3, 100px);
    grid-template-rows:repeat(4, 100px);

    grid-auto-flow:column dense;
    grid-auto-columns:100px;
  } */


  /* 「grid-template-areas」
  視覚的にグリッドレイアウトが出来る
  親要素に配置
  子要素には「grid-area」にて定義付する
  ※ピリオドにしたら配置されない
  ※配置によっては壊れてしまう事もある
  ex)
  100pxのボックスが視覚的に配置される
  container{
    display: grid;
    grid-template-columns: repeat(5, 100px);
    grid-template-rows:repeat(4, 100px);
    grid-template-areas:
    "r r r y y"
    "r r r y y"
    "c c g y y"
    "c c b . .";
  }
  box1{
    background: hsl(0, 60%, 60%);
    grid-area: r;
  }
  
  box2{
    background: hsl(60, 60%, 60%);
    grid-area: y;
  }
  ... */









  グリッドレイアウト編
  #から

body{
  margin: 0;

}

.container{
  display: grid;




  /* 余白を作らず常にピッタリと設置するよう指定 */
  grid-template-columns: repeat(3, 100px);

  grid-template-rows:repeat(2, 100px);

  width: 400px;
  height: 300px;
  background: #eee;

  justify-content: center;
  align-content: center;

  justify-items: center;
  align-items: center;


}

.container > div {
  width: 50px;
  height: 50px;
}


.box1{
  background: hsl(0, 60%, 60%);
}

.box2{
  background: hsl(60, 60%, 60%);
}

.box3{
  background: hsl(120, 60%, 60%);
}

.box4{
  background: hsl(180, 60%, 60%);
}

.box5{
  background: hsl(240, 60%, 60%);
}

